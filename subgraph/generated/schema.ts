// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Applicant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Applicant entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Applicant entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Applicant", id.toString(), this);
  }

  static load(id: string): Applicant | null {
    return store.get("Applicant", id) as Applicant | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get projects(): Array<string> | null {
    let value = this.get("projects");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set projects(value: Array<string> | null) {
    if (value === null) {
      this.unset("projects");
    } else {
      this.set("projects", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Project extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Project entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Project entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Project", id.toString(), this);
  }

  static load(id: string): Project | null {
    return store.get("Project", id) as Project | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get grantRequest(): string | null {
    let value = this.get("grantRequest");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set grantRequest(value: string | null) {
    if (value === null) {
      this.unset("grantRequest");
    } else {
      this.set("grantRequest", Value.fromString(value as string));
    }
  }
}

export class Grantor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Grantor entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Grantor entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Grantor", id.toString(), this);
  }

  static load(id: string): Grantor | null {
    return store.get("Grantor", id) as Grantor | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get grants(): Array<string> | null {
    let value = this.get("grants");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set grants(value: Array<string> | null) {
    if (value === null) {
      this.unset("grants");
    } else {
      this.set("grants", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Grant extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Grant entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Grant entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Grant", id.toString(), this);
  }

  static load(id: string): Grant | null {
    return store.get("Grant", id) as Grant | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get amountAvailable(): BigInt {
    let value = this.get("amountAvailable");
    return value.toBigInt();
  }

  set amountAvailable(value: BigInt) {
    this.set("amountAvailable", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get grantor(): string {
    let value = this.get("grantor");
    return value.toString();
  }

  set grantor(value: string) {
    this.set("grantor", Value.fromString(value));
  }

  get grantRequests(): Array<string> | null {
    let value = this.get("grantRequests");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set grantRequests(value: Array<string> | null) {
    if (value === null) {
      this.unset("grantRequests");
    } else {
      this.set("grantRequests", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class GrantRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GrantRequest entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GrantRequest entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GrantRequest", id.toString(), this);
  }

  static load(id: string): GrantRequest | null {
    return store.get("GrantRequest", id) as GrantRequest | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amountInUsd(): BigInt {
    let value = this.get("amountInUsd");
    return value.toBigInt();
  }

  set amountInUsd(value: BigInt) {
    this.set("amountInUsd", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get project(): string {
    let value = this.get("project");
    return value.toString();
  }

  set project(value: string) {
    this.set("project", Value.fromString(value));
  }

  get grant(): string {
    let value = this.get("grant");
    return value.toString();
  }

  set grant(value: string) {
    this.set("grant", Value.fromString(value));
  }
}
